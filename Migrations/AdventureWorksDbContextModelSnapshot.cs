// <auto-generated />
using System;
using ApiIntegrationTesting.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiIntegrationTesting.Migrations
{
    [DbContext(typeof(AdventureWorksDbContext))]
    partial class AdventureWorksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.AddressEntity", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("Address", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.AddressTypeEntity", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressType", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.BillOfMaterials", b =>
                {
                    b.Property<int>("BillOfMaterialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillOfMaterialsId"));

                    b.Property<short>("Bomlevel")
                        .HasColumnType("smallint");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PerAssemblyQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductAssemblyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BillOfMaterialsId");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ProductAssemblyId");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("BillOfMaterials", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessEntityId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("BusinessEntity", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.BusinessEntityAddressEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId", "AddressId", "AddressTypeId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("BusinessEntityAddress", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CountryRegionCurrency", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CountryRegionCode", "CurrencyCode");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("CurrencyCode1");

                    b.ToTable("CountryRegionCurrency", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CountryRegionEntity", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryRegionCode");

                    b.ToTable("CountryRegion", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditCardId"));

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ExpMonth")
                        .HasColumnType("tinyint");

                    b.Property<short>("ExpYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreditCardId");

                    b.ToTable("CreditCard", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CurrencyCode");

                    b.ToTable("Currency", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyRateId"));

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CurrencyRateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EndOfDayRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FromCurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToCurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CurrencyRateId");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("CurrencyCode1");

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("ToCurrencyCode");

                    b.ToTable("CurrencyRate", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CustomerEntity", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId");

                    b.HasIndex("PersonId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Customer", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Department", b =>
                {
                    b.Property<short>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("DepartmentId"));

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department", "HumanResources");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.EmailAddress", b =>
                {
                    b.Property<int>("EmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAddressId"));

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddressName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailAddress");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailAddressId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("EmailAddress", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Employee", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CurrentFlag")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("OrganizationLevel")
                        .HasColumnType("smallint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SalariedFlag")
                        .HasColumnType("bit");

                    b.Property<short>("SickLeaveHours")
                        .HasColumnType("smallint");

                    b.Property<short>("VacationHours")
                        .HasColumnType("smallint");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("Employee", "HumanResources");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.EmployeeDepartmentHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentId")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShiftId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BusinessEntityId", "DepartmentId", "ShiftId", "StartDate");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ShiftId");

                    b.ToTable("EmployeeDepartmentHistory", "HumanResources");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.EmployeePayHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("PayFrequency")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BusinessEntityId", "RateChangeDate");

                    b.ToTable("EmployeePayHistory", "HumanResources");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Illustration", b =>
                {
                    b.Property<int>("IllustrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IllustrationId"));

                    b.Property<string>("Diagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IllustrationId");

                    b.ToTable("Illustration", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.JobCandidate", b =>
                {
                    b.Property<int>("JobCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobCandidateId"));

                    b.Property<int?>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCandidateId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("JobCandidate", "HumanResources");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Location", b =>
                {
                    b.Property<short>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("LocationId"));

                    b.Property<decimal>("Availability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Location", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.BusinessEntityContactEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BusinessEntityId", "PersonId", "ContactTypeId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("BusinessEntityContact", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.ContactTypeEntity", b =>
                {
                    b.Property<int>("ContactTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactTypeId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactTypeId");

                    b.ToTable("ContactType", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Demographics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailPromotion")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit");

                    b.Property<int>("PersonTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("Person", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.PersonTypeEntity", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonTypeId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PersonTypeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PersonTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonTypeGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonTypeName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("PersonTypeId");

                    b.ToTable("PersonType", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PersonCreditCard", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BusinessEntityId", "CreditCardId");

                    b.HasIndex("CreditCardId");

                    b.ToTable("PersonCreditCard", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PersonPhone", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PhoneNumberTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");

                    b.HasIndex("PhoneNumberTypeId");

                    b.ToTable("PersonPhone", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PhoneNumberType", b =>
                {
                    b.Property<int>("PhoneNumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneNumberTypeId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PhoneNumberTypeId");

                    b.ToTable("PhoneNumberType", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DaysToManufacture")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FinishedGoodsFlag")
                        .HasColumnType("bit");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("MakeFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductSubcategoryId")
                        .HasColumnType("int");

                    b.Property<short>("ReorderPoint")
                        .HasColumnType("smallint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("SafetyStockLevel")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Style")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductSubcategoryId");

                    b.HasIndex("SizeUnitMeasureCode");

                    b.HasIndex("WeightUnitMeasureCode");

                    b.ToTable("Product", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategory", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductCostHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "StartDate");

                    b.ToTable("ProductCostHistory", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductDescriptionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductDescriptionId");

                    b.ToTable("ProductDescription", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductInventory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<short>("LocationId")
                        .HasColumnType("smallint");

                    b.Property<byte>("Bin")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Shelf")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("ProductInventory", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductListPriceHistory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "StartDate");

                    b.ToTable("ProductListPriceHistory", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductModelId"));

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductModelId");

                    b.ToTable("ProductModel", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductModelIllustration", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<int>("IllustrationId")
                        .HasColumnType("int");

                    b.Property<int?>("IllustrationId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductModelId1")
                        .HasColumnType("int");

                    b.HasKey("ProductModelId", "IllustrationId");

                    b.HasIndex("IllustrationId");

                    b.HasIndex("IllustrationId1");

                    b.HasIndex("ProductModelId1");

                    b.ToTable("ProductModelIllustration", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductModelProductDescriptionCulture", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnType("int");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("CultureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductDescriptionId1")
                        .HasColumnType("int");

                    b.Property<int?>("ProductModelId1")
                        .HasColumnType("int");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "CultureId");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("ProductDescriptionId1");

                    b.HasIndex("ProductModelId1");

                    b.ToTable("ProductModelProductDescriptionCulture", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("ProductPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPhotoId"));

                    b.Property<byte[]>("LargePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LargePhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductPhotoId");

                    b.ToTable("ProductPhoto", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductProductPhoto", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "ProductPhotoId");

                    b.HasIndex("ProductPhotoId");

                    b.ToTable("ProductProductPhoto", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductReviewId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReviewerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReview", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSubcategoryId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductSubcategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductSubcategory", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductVendor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("AverageLeadTime")
                        .HasColumnType("int");

                    b.Property<decimal?>("LastReceiptCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxOrderQty")
                        .HasColumnType("int");

                    b.Property<int>("MinOrderQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OnOrderQty")
                        .HasColumnType("int");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "BusinessEntityId");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("ProductVendor", "Purchasing");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ReceivedQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("StockedQty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseOrderId", "PurchaseOrderDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("PurchaseOrderDetail", "Purchasing");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderId"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipMethodId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrderHeader", "Purchasing");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Sales.StoreEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Demographics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("Store", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CarrierTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SpecialOfferId", "ProductId");

                    b.ToTable("SalesOrderDetail", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesOrderId"));

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BillToAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreditCardId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyRateId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OnlineOrderFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SalesOrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShipMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ShipToAddressId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalDue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SalesOrderId");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CurrencyRateId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("ShipMethodId");

                    b.HasIndex("ShipToAddressId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesOrderHeader", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesOrderHeaderSalesReason", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SalesReasonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalesReasonId1")
                        .HasColumnType("int");

                    b.HasKey("SalesOrderId", "SalesReasonId");

                    b.HasIndex("SalesReasonId");

                    b.HasIndex("SalesReasonId1");

                    b.ToTable("SalesOrderHeaderSalesReason", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesPerson", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommissionPct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalesLastYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalesQuota")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesYtd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesPerson", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesPersonQuotaHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuotaDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SalesPersonBusinessEntityId")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesQuota")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BusinessEntityId", "QuotaDate");

                    b.HasIndex("SalesPersonBusinessEntityId");

                    b.ToTable("SalesPersonQuotaHistory", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesReason", b =>
                {
                    b.Property<int>("SalesReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesReasonId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesReasonId");

                    b.ToTable("SalesReason", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesTaxRateEntity", b =>
                {
                    b.Property<int>("SalesTaxRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesTaxRateId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("StateProvinceEntityStateProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("TaxType")
                        .HasColumnType("tinyint");

                    b.HasKey("SalesTaxRateId");

                    b.HasIndex("StateProvinceEntityStateProvinceId");

                    b.HasIndex("StateProvinceId");

                    b.ToTable("SalesTaxRate", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", b =>
                {
                    b.Property<int>("TerritoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerritoryId"));

                    b.Property<decimal>("CostLastYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostYtd")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalesLastYear")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SalesYtd")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TerritoryId");

                    b.HasIndex("CountryRegionCode");

                    b.ToTable("SalesTerritory", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesTerritoryHistory", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SalesPersonBusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesTerritoryEntityTerritoryId")
                        .HasColumnType("int");

                    b.HasKey("BusinessEntityId", "TerritoryId", "StartDate");

                    b.HasIndex("SalesPersonBusinessEntityId");

                    b.HasIndex("SalesTerritoryEntityTerritoryId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("SalesTerritoryHistory", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ScrapReason", b =>
                {
                    b.Property<short>("ScrapReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ScrapReasonId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScrapReasonId");

                    b.ToTable("ScrapReason", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityFunctionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FunctionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FunctionDescription");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FunctionName");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FunctionGuid");

                    b.HasKey("Id");

                    b.ToTable("SecurityFunction", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupDescription");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("GroupName");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("GroupGuid");

                    b.HasKey("Id");

                    b.ToTable("SecurityGroup", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupSecurityFunctionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityGroupSecurityFunctionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SecurityGroupSecurityFunctionGuid");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("GroupId");

                    b.ToTable("SecurityGroupSecurityFunction", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupSecurityRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityGroupSecurityRoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SecurityGroupSecurityRoleGuid");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("SecurityGroupSecurityRole", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupUserAccountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SecurityGroupUserAccountId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SecurityGroupUserAccountGuid");

                    b.HasKey("Id");

                    b.HasIndex("BusinessEntityId");

                    b.HasIndex("GroupId");

                    b.ToTable("SecurityGroupUserAccount", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleDescription");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RoleName");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleGuid");

                    b.HasKey("Id");

                    b.ToTable("SecurityRole", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.UserAccountEntity", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<int>("PrimaryEmailAddressId")
                        .HasColumnType("int");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessEntityId");

                    b.HasIndex("PrimaryEmailAddressId");

                    b.ToTable("UserAccount", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.UserRefreshTokenEntity", b =>
                {
                    b.Property<int>("UserRefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRefreshTokenId"));

                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int")
                        .HasColumnName("BusinessEntityId");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IpAddress");

                    b.Property<bool>("IsExpired")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasColumnName("IsExpired");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit")
                        .HasColumnName("IsRevoked");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRefreshTokenGuid");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RefreshToken");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("RevokedOn");

                    b.HasKey("UserRefreshTokenId");

                    b.HasIndex("BusinessEntityId");

                    b.ToTable("UserRefreshToken", "Shield");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shift", b =>
                {
                    b.Property<byte>("ShiftId")
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ShiftId");

                    b.ToTable("Shift", "HumanResources");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ShipMethod", b =>
                {
                    b.Property<int>("ShipMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShipMethodId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ShipBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShipRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ShipMethodId");

                    b.ToTable("ShipMethod", "Purchasing");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCartItem", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialOfferId"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPct")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxQty")
                        .HasColumnType("int");

                    b.Property<int>("MinQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialOfferId");

                    b.ToTable("SpecialOffer", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SpecialOfferProduct", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SpecialOfferId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SpecialOfferProduct", "Sales");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.StateProvinceEntity", b =>
                {
                    b.Property<int>("StateProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateProvinceId"));

                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsOnlyStateProvinceFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateProvinceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("StateProvinceId");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex("TerritoryId");

                    b.ToTable("StateProvince", "Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.ToTable("TransactionHistory", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.TransactionHistoryArchive", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderLineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("TransactionHistoryArchive", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitMeasureCode");

                    b.ToTable("UnitMeasure", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Vendor", b =>
                {
                    b.Property<int>("BusinessEntityId")
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("bit");

                    b.Property<byte>("CreditRating")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PreferredVendorStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PurchasingWebServiceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessEntityId");

                    b.ToTable("Vendor", "Purchasing");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkOrderId"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<short?>("ScrapReasonId")
                        .HasColumnType("smallint");

                    b.Property<short>("ScrappedQty")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StockedQty")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ScrapReasonId");

                    b.ToTable("WorkOrder", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.WorkOrderRouting", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<short>("OperationSequence")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ActualResourceHrs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("LocationId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PlannedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ScheduledEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("WorkOrderId", "ProductId", "OperationSequence");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("WorkOrderRouting", "Production");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.AddressEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.StateProvinceEntity", "StateProvince")
                        .WithMany("Addresses")
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.BillOfMaterials", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Component")
                        .WithMany("BillOfMaterialsComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "ProductAssembly")
                        .WithMany("BillOfMaterialsProductAssemblies")
                        .HasForeignKey("ProductAssemblyId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UnitMeasureCode");

                    b.Navigation("Component");

                    b.Navigation("ProductAssembly");

                    b.Navigation("UnitMeasureCodeNavigation");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.BusinessEntityAddressEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.AddressTypeEntity", "AddressType")
                        .WithMany("BusinessEntityAddresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityAddresses")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CountryRegionCurrency", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.CountryRegionEntity", "CountryRegionEntityCodeNavigation")
                        .WithMany()
                        .HasForeignKey("CountryRegionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Currency", "CurrencyCodeNavigation")
                        .WithMany()
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Currency", null)
                        .WithMany("CountryRegionCurrency")
                        .HasForeignKey("CurrencyCode1");

                    b.Navigation("CountryRegionEntityCodeNavigation");

                    b.Navigation("CurrencyCodeNavigation");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CurrencyRate", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Currency", null)
                        .WithMany("CurrencyRateFromCurrencyCodeNavigation")
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Currency", null)
                        .WithMany("CurrencyRateToCurrencyCodeNavigation")
                        .HasForeignKey("CurrencyCode1");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Currency", "FromCurrencyCodeNavigation")
                        .WithMany()
                        .HasForeignKey("FromCurrencyCode");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Currency", "ToCurrencyCodeNavigation")
                        .WithMany()
                        .HasForeignKey("ToCurrencyCode");

                    b.Navigation("FromCurrencyCodeNavigation");

                    b.Navigation("ToCurrencyCodeNavigation");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CustomerEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("PersonId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Sales.StoreEntity", "StoreEntity")
                        .WithMany("Customers")
                        .HasForeignKey("StoreId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", "TerritoryEntity")
                        .WithMany("Customers")
                        .HasForeignKey("TerritoryId");

                    b.Navigation("Person");

                    b.Navigation("StoreEntity");

                    b.Navigation("TerritoryEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.EmailAddress", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", "BusinessEntity")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Employee", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", "PersonBusinessEntity")
                        .WithMany("Employees")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonBusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.EmployeeDepartmentHistory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Employee", "BusinessEntity")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Department", "Department")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shift", "Shift")
                        .WithMany("EmployeeDepartmentHistory")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("Department");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.EmployeePayHistory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Employee", "BusinessEntity")
                        .WithMany("EmployeePayHistory")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.JobCandidate", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Employee", "BusinessEntity")
                        .WithMany("JobCandidates")
                        .HasForeignKey("BusinessEntityId");

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.BusinessEntityContactEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityContacts")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.ContactTypeEntity", "ContactType")
                        .WithMany("BusinessEntityContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", "Person")
                        .WithMany("BusinessEntityContacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("ContactType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany("Persons")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.UserAccountEntity", "UserAccount")
                        .WithOne("Person")
                        .HasForeignKey("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", "BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.PersonTypeEntity", "PersonType")
                        .WithMany()
                        .HasForeignKey("PersonTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("PersonType");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PersonCreditCard", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", "BusinessEntity")
                        .WithMany("PersonCreditCards")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.CreditCard", "CreditCard")
                        .WithMany("PersonCreditCards")
                        .HasForeignKey("CreditCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PersonPhone", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", "BusinessEntity")
                        .WithMany("PersonPhones")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.PhoneNumberType", "PhoneNumberType")
                        .WithMany("PersonPhones")
                        .HasForeignKey("PhoneNumberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Product", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductSubcategory", "ProductSubcategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductSubcategoryId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.UnitMeasure", "SizeUnitMeasureCodeNavigation")
                        .WithMany("ProductSizeUnitMeasureCodeNavigation")
                        .HasForeignKey("SizeUnitMeasureCode");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.UnitMeasure", "WeightUnitMeasureCodeNavigation")
                        .WithMany("ProductWeightUnitMeasureCodeNavigation")
                        .HasForeignKey("WeightUnitMeasureCode");

                    b.Navigation("ProductModel");

                    b.Navigation("ProductSubcategory");

                    b.Navigation("SizeUnitMeasureCodeNavigation");

                    b.Navigation("WeightUnitMeasureCodeNavigation");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductCostHistory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("ProductCostHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductInventory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Location", "Location")
                        .WithMany("ProductInventory")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("ProductInventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductListPriceHistory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("ProductListPriceHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductModelIllustration", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Illustration", "Illustration")
                        .WithMany()
                        .HasForeignKey("IllustrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Illustration", null)
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("IllustrationId1");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductModel", "ProductModel")
                        .WithMany()
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductModel", null)
                        .WithMany("ProductModelIllustration")
                        .HasForeignKey("ProductModelId1");

                    b.Navigation("Illustration");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductModelProductDescriptionCulture", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductDescription", "ProductDescription")
                        .WithMany()
                        .HasForeignKey("ProductDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductDescription", null)
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductDescriptionId1");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductModel", "ProductModel")
                        .WithMany()
                        .HasForeignKey("ProductModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductModel", null)
                        .WithMany("ProductModelProductDescriptionCulture")
                        .HasForeignKey("ProductModelId1");

                    b.Navigation("ProductDescription");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductProductPhoto", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("ProductProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductPhoto", "ProductPhoto")
                        .WithMany("ProductProductPhotos")
                        .HasForeignKey("ProductPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductPhoto");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductReview", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductSubcategory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubcategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductVendor", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Vendor", "BusinessEntity")
                        .WithMany("ProductVendors")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("ProductVendors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.UnitMeasure", "UnitMeasureCodeNavigation")
                        .WithMany("ProductVendors")
                        .HasForeignKey("UnitMeasureCode");

                    b.Navigation("BusinessEntity");

                    b.Navigation("Product");

                    b.Navigation("UnitMeasureCodeNavigation");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PurchaseOrderDetail", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.PurchaseOrderHeader", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PurchaseOrderHeader", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Employee", "Employee")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ShipMethod", "ShipMethod")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("ShipMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Vendor", "Vendor")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ShipMethod");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Sales.StoreEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "StoreBusinessEntity")
                        .WithMany("Stores")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesPerson", "PrimarySalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonId");

                    b.Navigation("PrimarySalesPerson");

                    b.Navigation("StoreBusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesOrderDetail", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SpecialOfferProduct", "SpecialOfferProduct")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SpecialOfferId", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");

                    b.Navigation("SpecialOfferProduct");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesOrderHeader", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.AddressEntity", "BillToAddressEntity")
                        .WithMany("SalesOrderHeaderBillToAddresses")
                        .HasForeignKey("BillToAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.CreditCard", "CreditCard")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CreditCardId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.CurrencyRate", "CurrencyRate")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CurrencyRateId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.CustomerEntity", "CustomerEntity")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesPerson", "SalesPerson")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("SalesPersonId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ShipMethod", "ShipMethod")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("ShipMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.AddressEntity", "ShipToAddressEntity")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", "TerritoryEntity")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("TerritoryId");

                    b.Navigation("BillToAddressEntity");

                    b.Navigation("CreditCard");

                    b.Navigation("CurrencyRate");

                    b.Navigation("CustomerEntity");

                    b.Navigation("SalesPerson");

                    b.Navigation("ShipMethod");

                    b.Navigation("ShipToAddressEntity");

                    b.Navigation("TerritoryEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesOrderHeaderSalesReason", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderHeaderSalesReasons")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesReason", "SalesReason")
                        .WithMany()
                        .HasForeignKey("SalesReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesReason", null)
                        .WithMany("SalesOrderHeaderSalesReason")
                        .HasForeignKey("SalesReasonId1");

                    b.Navigation("SalesOrder");

                    b.Navigation("SalesReason");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesPerson", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Employee", "BusinessEntity")
                        .WithMany("SalesPersons")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", "TerritoryEntity")
                        .WithMany("SalesPeople")
                        .HasForeignKey("TerritoryId");

                    b.Navigation("BusinessEntity");

                    b.Navigation("TerritoryEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesPersonQuotaHistory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesPerson", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesPerson", null)
                        .WithMany("SalesPersonQuotaHistory")
                        .HasForeignKey("SalesPersonBusinessEntityId");

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesTaxRateEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.StateProvinceEntity", null)
                        .WithMany("SalesTaxRates")
                        .HasForeignKey("StateProvinceEntityStateProvinceId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.StateProvinceEntity", "StateProvince")
                        .WithMany()
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.CountryRegionEntity", "CountryRegion")
                        .WithMany()
                        .HasForeignKey("CountryRegionCode");

                    b.Navigation("CountryRegion");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesTerritoryHistory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesPerson", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesPerson", null)
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("SalesPersonBusinessEntityId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", null)
                        .WithMany("SalesTerritoryHistory")
                        .HasForeignKey("SalesTerritoryEntityTerritoryId");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", "TerritoryEntity")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("TerritoryEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupSecurityFunctionEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.SecurityFunctionEntity", "SecurityFunction")
                        .WithMany("SecurityGroupSecurityFunctionEntities")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupEntity", "SecurityGroup")
                        .WithMany("SecurityGroupSecurityFunctionEntities")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityFunction");

                    b.Navigation("SecurityGroup");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupSecurityRoleEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupEntity", "SecurityGroup")
                        .WithMany("SecurityGroupSecurityRoleEntities")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.SecurityRoleEntity", "SecurityRole")
                        .WithMany("SecurityGroupSecurityRoleEntities")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SecurityGroup");

                    b.Navigation("SecurityRole");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupUserAccountEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.UserAccountEntity", "UserAccount")
                        .WithMany("SecurityGroupUserAccountEntities")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupEntity", "SecurityGroup")
                        .WithMany("SecurityGroupUserAccountEntities")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("SecurityGroup");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.UserAccountEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany("UserAccounts")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.EmailAddress", "EmailAddress")
                        .WithMany()
                        .HasForeignKey("PrimaryEmailAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("EmailAddress");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.UserRefreshTokenEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany()
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Shield.UserAccountEntity", "UserAccountEntity")
                        .WithMany("UserRefreshTokenEntities")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("UserAccountEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SpecialOfferProduct", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("SpecialOfferProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SpecialOffer", "SpecialOffer")
                        .WithMany("SpecialOfferProducts")
                        .HasForeignKey("SpecialOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SpecialOffer");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.StateProvinceEntity", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.CountryRegionEntity", "CountryRegion")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryRegionCode");

                    b.HasOne("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", "SalesTerritory")
                        .WithMany("StateProvinces")
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryRegion");

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.TransactionHistory", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Vendor", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.BusinessEntity", "BusinessEntity")
                        .WithMany("Vendors")
                        .HasForeignKey("BusinessEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.WorkOrder", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.ScrapReason", "ScrapReason")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ScrapReasonId");

                    b.Navigation("Product");

                    b.Navigation("ScrapReason");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.WorkOrderRouting", b =>
                {
                    b.HasOne("ApiIntegrationTesting.Database.Entities.Location", "Location")
                        .WithMany("WorkOrderRoutings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.Product", "Product")
                        .WithMany("WorkOrderRoutings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiIntegrationTesting.Database.Entities.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderRoutings")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.AddressEntity", b =>
                {
                    b.Navigation("SalesOrderHeaderBillToAddresses");

                    b.Navigation("SalesOrderHeaderShipToAddress");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.AddressTypeEntity", b =>
                {
                    b.Navigation("BusinessEntityAddresses");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.BusinessEntity", b =>
                {
                    b.Navigation("BusinessEntityAddresses");

                    b.Navigation("BusinessEntityContacts");

                    b.Navigation("Persons");

                    b.Navigation("Stores");

                    b.Navigation("UserAccounts");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CountryRegionEntity", b =>
                {
                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CreditCard", b =>
                {
                    b.Navigation("PersonCreditCards");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Currency", b =>
                {
                    b.Navigation("CountryRegionCurrency");

                    b.Navigation("CurrencyRateFromCurrencyCodeNavigation");

                    b.Navigation("CurrencyRateToCurrencyCodeNavigation");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CurrencyRate", b =>
                {
                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.CustomerEntity", b =>
                {
                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Department", b =>
                {
                    b.Navigation("EmployeeDepartmentHistory");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Employee", b =>
                {
                    b.Navigation("EmployeeDepartmentHistory");

                    b.Navigation("EmployeePayHistory");

                    b.Navigation("JobCandidates");

                    b.Navigation("PurchaseOrderHeaders");

                    b.Navigation("SalesPersons");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Illustration", b =>
                {
                    b.Navigation("ProductModelIllustration");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Location", b =>
                {
                    b.Navigation("ProductInventory");

                    b.Navigation("WorkOrderRoutings");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.ContactTypeEntity", b =>
                {
                    b.Navigation("BusinessEntityContacts");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Person.PersonEntity", b =>
                {
                    b.Navigation("BusinessEntityContacts");

                    b.Navigation("Customers");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Employees");

                    b.Navigation("PersonCreditCards");

                    b.Navigation("PersonPhones");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PhoneNumberType", b =>
                {
                    b.Navigation("PersonPhones");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Product", b =>
                {
                    b.Navigation("BillOfMaterialsComponents");

                    b.Navigation("BillOfMaterialsProductAssemblies");

                    b.Navigation("ProductCostHistory");

                    b.Navigation("ProductInventory");

                    b.Navigation("ProductListPriceHistory");

                    b.Navigation("ProductProductPhotos");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductVendors");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("SpecialOfferProducts");

                    b.Navigation("TransactionHistory");

                    b.Navigation("WorkOrderRoutings");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductCategory", b =>
                {
                    b.Navigation("ProductSubcategories");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductDescription", b =>
                {
                    b.Navigation("ProductModelProductDescriptionCulture");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductModel", b =>
                {
                    b.Navigation("ProductModelIllustration");

                    b.Navigation("ProductModelProductDescriptionCulture");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductPhoto", b =>
                {
                    b.Navigation("ProductProductPhotos");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ProductSubcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.PurchaseOrderHeader", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Sales.StoreEntity", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderDetails");

                    b.Navigation("SalesOrderHeaderSalesReasons");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesPerson", b =>
                {
                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("SalesPersonQuotaHistory");

                    b.Navigation("SalesTerritoryHistory");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesReason", b =>
                {
                    b.Navigation("SalesOrderHeaderSalesReason");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SalesTerritoryEntity", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("SalesPeople");

                    b.Navigation("SalesTerritoryHistory");

                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ScrapReason", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityFunctionEntity", b =>
                {
                    b.Navigation("SecurityGroupSecurityFunctionEntities");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityGroupEntity", b =>
                {
                    b.Navigation("SecurityGroupSecurityFunctionEntities");

                    b.Navigation("SecurityGroupSecurityRoleEntities");

                    b.Navigation("SecurityGroupUserAccountEntities");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.SecurityRoleEntity", b =>
                {
                    b.Navigation("SecurityGroupSecurityRoleEntities");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shield.UserAccountEntity", b =>
                {
                    b.Navigation("Person");

                    b.Navigation("SecurityGroupUserAccountEntities");

                    b.Navigation("UserRefreshTokenEntities");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Shift", b =>
                {
                    b.Navigation("EmployeeDepartmentHistory");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.ShipMethod", b =>
                {
                    b.Navigation("PurchaseOrderHeaders");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SpecialOffer", b =>
                {
                    b.Navigation("SpecialOfferProducts");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.SpecialOfferProduct", b =>
                {
                    b.Navigation("SalesOrderDetail");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.StateProvinceEntity", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("SalesTaxRates");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.UnitMeasure", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("ProductSizeUnitMeasureCodeNavigation");

                    b.Navigation("ProductVendors");

                    b.Navigation("ProductWeightUnitMeasureCodeNavigation");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.Vendor", b =>
                {
                    b.Navigation("ProductVendors");

                    b.Navigation("PurchaseOrderHeaders");
                });

            modelBuilder.Entity("ApiIntegrationTesting.Database.Entities.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderRoutings");
                });
#pragma warning restore 612, 618
        }
    }
}
